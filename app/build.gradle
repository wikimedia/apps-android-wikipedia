apply plugin: 'com.android.application'

import com.android.build.gradle.internal.dsl.ProductFlavor
import com.android.ddmlib.DdmPreferences

import java.util.concurrent.TimeUnit

// Copy the signing.properties.sample file to ~/.sign/signing.properties and adjust the values.
final File PROD_PROPS_FILE = new File(System.getProperty('user.home'), '.sign/signing.properties')
final File REPO_PROPS_FILE = new File('repo.properties')
final Properties PROD_PROPS = loadProperties(PROD_PROPS_FILE)
final Properties REPO_PROPS = loadProperties(REPO_PROPS_FILE)

final int ADB_TIMEOUT = TimeUnit.MINUTES.toMillis(15)
final boolean continuousIntegrationBuild = System.getenv('JENKINS_HOME') != null
final boolean preDexEnabled = hasProperty('pre.dex') ?
        Boolean.valueOf(getProperty('pre.dex').toString()) :
        !continuousIntegrationBuild
if (!preDexEnabled) {
    println 'Pre-dexing disabled.'
}

if (continuousIntegrationBuild) {
    DdmPreferences.setTimeOut(ADB_TIMEOUT)
    println "Device timeout is ${DdmPreferences.getTimeOut()}ms"
}

def static getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

def computeVersionName(label) {
    return "2.7.${android.defaultConfig.versionCode}-${label}-${date}"
}

final JavaVersion JAVA_VERSION = JavaVersion.VERSION_1_8
android {
    // Keep version in sync with /project.properties
    compileSdkVersion 27
    buildToolsVersion '27.0.3'

    compileOptions {
        sourceCompatibility = JAVA_VERSION
        targetCompatibility = JAVA_VERSION
    }

    dexOptions {
        preDexLibraries = preDexEnabled
        jumboMode = true
    }

    defaultConfig {
        applicationId 'org.wikipedia'
        minSdkVersion 19
        targetSdkVersion 27
        versionCode 235
        testApplicationId 'org.wikipedia.test'
        testInstrumentationRunner "org.wikipedia.WikipediaTestRunner"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments('butterknife.minSdk': minSdkVersion.apiString,
                          'butterknife.debuggable': 'false')
            }
        }
    }

    sourceSets {
        test {
            java.srcDirs += 'src/testlib/java'
        }
        androidTest {
            java.srcDirs += 'src/testlib/java'
        }
    }

    signingConfigs {
        prod {
            setSigningConfigKey(prod, PROD_PROPS)
        }
        debug {
            setSigningConfigKey(debug, REPO_PROPS)
        }
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-debug.pro'
            testProguardFile 'test-proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFile 'test-proguard-rules.pro'
        }
    }

    flavorDimensions 'default'

    productFlavors {
        dev {
            versionName computeVersionName('dev')
            applicationIdSuffix 'dev'
            signingConfig signingConfigs.debug
            dimension 'default'
        }
        prod {
            versionName computeVersionName('r')
            signingConfig signingConfigs.prod
            dimension 'default'
        }
        alpha {
            versionName computeVersionName('alpha')
            applicationIdSuffix 'alpha'
            signingConfig signingConfigs.debug
            dimension 'default'
        }
        beta {
            versionName computeVersionName('beta')
            applicationIdSuffix 'beta'
            signingConfig signingConfigs.prod
            dimension 'default'
        }
        amazon {
            versionName computeVersionName('amazon')
            signingConfig signingConfigs.prod
            dimension 'default'
        }
        fdroid {
            versionName computeVersionName('fdroid')
            signingConfig signingConfigs.prod
            dimension 'default'
        }
        custom {
            versionName computeVersionName(customChannel)
            // next line is for injecting a custom channel value into the custom/AndroidManifest.xml
            manifestPlaceholders = [customChannel:getProperty('customChannel').toString()]
            signingConfig signingConfigs.prod
            dimension 'default'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a'
            universalApk true
        }
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor' // required by Butter Knife

        // For Espresso testing libraries. See http://stackoverflow.com/q/33800924/970346.
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a':1, 'arm64-v8a':2, x86:3, x86_64:4]

// For per-density APKs, create a similar map like this:
// ext.densityCodes = ['mdpi': 1, 'hdpi': 2, 'xhdpi': 3]

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 10000 + variant.versionCode.
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        output.versionCodeOverride = project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 10000 + variant.versionCode
    }
}

apply from: '../gradle/src/test.gradle'
apply from: '../gradle/src/checkstyle.gradle'

dependencies {

    // To keep the Maven Central dependencies up-to-date
    // use http://gradleplease.appspot.com/ or http://search.maven.org/.
    // Debug with ./gradlew -q app:dependencies --configuration compile

    String okHttpVersion = '3.10.0'
    String supportVersion = '27.1.1'
    String retrofitVersion = '2.4.0'
    String espressoVersion = '3.0.1'
    String butterKnifeVersion = '8.8.1'
    String frescoVersion = '1.9.0' // When updating this version, resync file copies under app/src/main/java/com/facebook
    String testingSupportVersion = '1.0.0'
    String mockitoCore = 'org.mockito:mockito-core:1.9.5'
    String leakCanaryVersion = '1.5.4'

    implementation "com.android.support:support-compat:$supportVersion"
    implementation "com.android.support:support-core-utils:$supportVersion"
    implementation "com.android.support:support-core-ui:$supportVersion"
    implementation "com.android.support:support-fragment:$supportVersion"
    implementation 'com.android.support.constraint:constraint-layout:1.1.0'

    implementation "com.android.support:cardview-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation "com.android.support:palette-v7:$supportVersion"
    implementation "com.android.support:preference-v14:$supportVersion"

    implementation 'com.duolingo.open:rtl-viewpager:1.0.3'
    implementation "com.facebook.fresco:animated-gif:$frescoVersion"
    implementation "com.facebook.fresco:fresco:$frescoVersion"
    implementation "com.facebook.fresco:imagepipeline-okhttp3:$frescoVersion"
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.romandanylyk:pageindicatorview:0.1.2'
    implementation "com.squareup.okhttp3:okhttp-urlconnection:$okHttpVersion" // for JavaNetCookieJar
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    implementation 'com.squareup:otto:1.3.8'
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.9.1'
    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    implementation "com.mapbox.mapboxsdk:mapbox-android-sdk:5.5.0@aar"
    implementation "com.mapbox.mapboxsdk:mapbox-android-ui:2.2.10"
    implementation 'net.hockeyapp.android:HockeySDK:5.1.0'
    implementation 'org.apache.commons:commons-lang3:3.5'
    implementation "commons-io:commons-io:2.5"
    implementation 'org.jsoup:jsoup:1.10.2'

    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"

    android.productFlavors.each { flavor ->
        String dep
        if('dev' == flavor.name) {
            dep = "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
        } else {
            dep = "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
        }
        "${flavor.name}Implementation" dep
    }

    testImplementation 'junit:junit:4.12'
    testImplementation mockitoCore
    testImplementation 'org.robolectric:robolectric:3.6.1'
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"

    androidTestImplementation mockitoCore
    androidTestRuntimeOnly 'com.crittercism.dexmaker:dexmaker:1.4'
    androidTestImplementation 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
    androidTestRuntimeOnly 'com.crittercism.dexmaker:dexmaker-dx:1.4'

    // Required by Android JUnit Runner.
    androidTestImplementation "com.android.support:support-annotations:$supportVersion"
    androidTestImplementation "com.android.support.test:rules:$testingSupportVersion" // JUnit Rules
    androidTestImplementation "com.android.support.test:runner:$testingSupportVersion" // Android JUnit Runner
    androidTestImplementation "com.android.support.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-contrib:$espressoVersion"

}

private setSigningConfigKey(config, Properties props) {
    if (props) {
        config.storeFile = props['keystore'] == null ? null : file(props['keystore'])
        config.storePassword = props['store.pass']
        config.keyAlias = props['key.alias']
        config.keyPassword = props['key.pass']
    }
    return config
}

private static Properties loadProperties(File file) {
    Properties props = null
    if (file.canRead()) {
        props = new Properties()
        props.load(new FileInputStream(file))
    } else {
        System.err.println "\"${file}\" not found"
    }
    return props
}

addSyncContentProviderAuthority 'readinglists', 'reading_lists'

private void addSyncContentProviderAuthority(String path, String name) {
    android.productFlavors.all { ProductFlavor flavor ->
        String authority = "${appId(flavor)}.sync.${path}"
        resValue 'string', "${name.toLowerCase()}_authority", authority
        buildConfigField 'String', "${name.toUpperCase()}_AUTHORITY", "\"$authority\""
    }
}

private String appId(ProductFlavor flavor) {
    String suffix = flavor.applicationIdSuffix
    String id = android.defaultConfig.applicationId + (suffix ? ".$suffix" : '')
    return id
}
