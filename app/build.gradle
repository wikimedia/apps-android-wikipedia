plugins {
    id 'com.android.application'
    id 'com.google.devtools.ksp'
    id 'com.google.gms.google-services'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlinx-serialization'
}

// Copy the signing.properties.sample file to ~/.sign/signing.properties and adjust the values.
final File PROD_PROPS_FILE = new File(System.getProperty('user.home'), '.sign/signing.properties')
final File REPO_PROPS_FILE = new File('repo.properties')
final Properties PROD_PROPS = loadProperties(PROD_PROPS_FILE)
final Properties REPO_PROPS = loadProperties(REPO_PROPS_FILE)

static def computeVersionName(versionCode, label) {
    return "2.7.${versionCode}-${label}-${(new Date()).format('yyyy-MM-dd')}"
}

final JavaVersion JAVA_VERSION = JavaVersion.VERSION_17

android {
    compileSdk 34

    compileOptions {
        coreLibraryDesugaringEnabled true

        sourceCompatibility = JAVA_VERSION
        targetCompatibility = JAVA_VERSION
    }

    kotlinOptions {
        jvmTarget = JAVA_VERSION
    }

    defaultConfig {
        applicationId 'org.wikipedia'
        minSdk 21
        targetSdk 34
        versionCode 50452
        testApplicationId 'org.wikipedia.test'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArguments clearPackageData: 'true'

        vectorDrawables.useSupportLibrary = true

        signingConfig signingConfigs.debug

        buildConfigField "String", "DEFAULT_RESTBASE_URI_FORMAT", '"%1$s://%2$s/api/rest_v1/"'
        buildConfigField "String", "META_WIKI_BASE_URI", '"https://meta.wikimedia.org"'
        buildConfigField "String", "EVENTGATE_ANALYTICS_EXTERNAL_BASE_URI", '"https://intake-analytics.wikimedia.org"'
        buildConfigField "String", "EVENTGATE_LOGGING_EXTERNAL_BASE_URI", '"https://intake-logging.wikimedia.org"'
        def TEST_LOGIN_USERNAME = System.getenv('TEST_LOGIN_USERNAME')
        def TEST_LOGIN_PASSWORD = System.getenv('TEST_LOGIN_PASSWORD')
        buildConfigField "String", "TEST_LOGIN_USERNAME", TEST_LOGIN_USERNAME != null ? "\"${TEST_LOGIN_USERNAME}\"" : '"Foo"'
        buildConfigField "String", "TEST_LOGIN_PASSWORD", TEST_LOGIN_PASSWORD != null ? "\"${TEST_LOGIN_PASSWORD}\"" : '"Bar"'
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    buildFeatures {
        viewBinding true
    }

    sourceSets {

        prod { java.srcDirs += 'src/extra/java' }
        beta { java.srcDirs += 'src/extra/java' }
        alpha { java.srcDirs += 'src/extra/java' }
        dev { java.srcDirs += 'src/extra/java' }
        custom { java.srcDirs += 'src/extra/java' }

        androidTest {
            assets.srcDirs += files("$projectDir/schemas".toString())
        }
    }

    signingConfigs {
        prod {
            setSigningConfigKey(prod, PROD_PROPS)
        }
        debug {
            setSigningConfigKey(debug, REPO_PROPS)
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles 'test-proguard-rules.pro'
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFiles 'test-proguard-rules.pro'
        }
    }

    flavorDimensions = ['default']

    productFlavors {
        dev {
            versionName computeVersionName(defaultConfig.versionCode, 'dev')
            applicationIdSuffix '.dev'
            buildConfigField "String", "META_WIKI_BASE_URI", '"https://meta.wikimedia.beta.wmflabs.org"'
            buildConfigField "String", "EVENTGATE_ANALYTICS_EXTERNAL_BASE_URI", '"https://intake-analytics.wikimedia.beta.wmflabs.org"'
            buildConfigField "String", "EVENTGATE_LOGGING_EXTERNAL_BASE_URI", '"https://intake-logging.wikimedia.beta.wmflabs.org"'
        }
        prod {
            versionName computeVersionName(defaultConfig.versionCode, 'r')
            signingConfig signingConfigs.prod
        }
        alpha {
            versionName computeVersionName(defaultConfig.versionCode, 'alpha')
            applicationIdSuffix '.alpha'
        }
        beta {
            versionName computeVersionName(defaultConfig.versionCode, 'beta')
            applicationIdSuffix '.beta'
            signingConfig signingConfigs.prod
        }
        fdroid {
            versionName computeVersionName(defaultConfig.versionCode, 'fdroid')
            signingConfig signingConfigs.prod
        }
        custom {
            versionName computeVersionName(defaultConfig.versionCode, customChannel)
            // next line is for injecting a custom channel value into the custom/AndroidManifest.xml
            manifestPlaceholders = [customChannel:getProperty('customChannel').toString()]
            signingConfig signingConfigs.prod
        }
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }

    bundle {
        language {
            enableSplit false
        }
    }
    namespace 'org.wikipedia'
}

configurations {
    compileClasspath.extendsFrom(implementation)
}

apply from: '../gradle/src/test.gradle'
apply from: '../gradle/src/checkstyle.gradle'
apply from: '../gradle/src/ktlint.gradle'

dependencies {

    // To keep the Maven Central dependencies up-to-date
    // use http://gradleplease.appspot.com/ or http://search.maven.org/.
    // Debug with ./gradlew -q app:dependencies --configuration compile

    String okHttpVersion = '4.10.0'
    String retrofitVersion = '2.9.0'
    String glideVersion = '4.15.1'
    String mockitoVersion = '5.2.0'
    String leakCanaryVersion = '2.12'
    String kotlinCoroutinesVersion = '1.7.3'
    String firebaseMessagingVersion = '23.2.1'
    String mlKitVersion = '17.0.4'
    String roomVersion = "2.5.2"
    String espressoVersion = '3.5.1'
    String serialization_version = '1.5.1'
    String metricsVersion = '1.12'

    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.3'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$serialization_version"

    implementation "com.google.android.material:material:1.9.0"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation "androidx.core:core-ktx:1.10.1"
    implementation "androidx.browser:browser:1.5.0"
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.fragment:fragment-ktx:1.6.1"
    implementation "androidx.paging:paging-runtime-ktx:3.2.0"
    implementation "androidx.palette:palette-ktx:1.0.0"
    implementation "androidx.preference:preference-ktx:1.2.0"
    implementation "androidx.recyclerview:recyclerview:1.3.1"
    implementation "androidx.viewpager2:viewpager2:1.0.0"
    implementation 'com.google.android.flexbox:flexbox:3.0.0'
    implementation 'com.android.installreferrer:installreferrer:2.2'
    implementation 'androidx.drawerlayout:drawerlayout:1.2.0'
    implementation 'androidx.work:work-runtime-ktx:2.8.1'
    implementation "org.wikimedia.metrics:metrics-platform:$metricsVersion"

    implementation ('com.github.michael-rapp:chrome-like-tab-switcher:0.4.6') {
        exclude group: 'org.jetbrains'
    }

    implementation "com.github.bumptech.glide:glide:$glideVersion"
    implementation "com.github.bumptech.glide:okhttp3-integration:$glideVersion"
    ksp "com.github.bumptech.glide:ksp:$glideVersion"

    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava3:$retrofitVersion"
    implementation "io.reactivex.rxjava3:rxjava:3.1.6"
    implementation "io.reactivex.rxjava3:rxandroid:3.0.2"
    implementation 'org.apache.commons:commons-lang3:3.13.0'
    implementation 'org.jsoup:jsoup:1.16.1'
    implementation 'com.github.chrisbanes:PhotoView:2.3.0'
    implementation 'com.github.skydoves:balloon:1.5.4'
    implementation "com.jakewharton.retrofit:retrofit2-kotlinx-serialization-converter:1.0.0"

    implementation("androidx.room:room-runtime:$roomVersion")
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    ksp "androidx.room:room-compiler:$roomVersion"
    implementation("androidx.room:room-ktx:$roomVersion")
    implementation "androidx.room:room-rxjava3:$roomVersion"

    // For language detection during editing
    prodImplementation "com.google.mlkit:language-id:$mlKitVersion"
    betaImplementation "com.google.mlkit:language-id:$mlKitVersion"
    alphaImplementation "com.google.mlkit:language-id:$mlKitVersion"
    devImplementation "com.google.mlkit:language-id:$mlKitVersion"
    customImplementation "com.google.mlkit:language-id:$mlKitVersion"

    // For receiving push notifications for logged-in users.
    prodImplementation "com.google.firebase:firebase-messaging-ktx:$firebaseMessagingVersion"
    betaImplementation "com.google.firebase:firebase-messaging-ktx:$firebaseMessagingVersion"
    alphaImplementation "com.google.firebase:firebase-messaging-ktx:$firebaseMessagingVersion"
    devImplementation "com.google.firebase:firebase-messaging-ktx:$firebaseMessagingVersion"
    customImplementation "com.google.firebase:firebase-messaging-ktx:$firebaseMessagingVersion"

    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
    implementation "com.squareup.leakcanary:plumber-android:$leakCanaryVersion"

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.mockito:mockito-inline:$mockitoVersion"
    testImplementation 'org.robolectric:robolectric:4.10.3'
    testImplementation "com.squareup.okhttp3:okhttp:$okHttpVersion"
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation "androidx.room:room-testing:$roomVersion"

    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation "androidx.room:room-testing:$roomVersion"
    androidTestUtil 'androidx.test:orchestrator:1.4.2'
}

private setSigningConfigKey(config, Properties props) {
    if(props != null) {
        config.storeFile = props['keystore'] == null ? null : file(props['keystore'])
        config.storePassword = props['store.pass']
        config.keyAlias = props['key.alias']
        config.keyPassword = props['key.pass']
    }
    return config
}

private static Properties loadProperties(File file) {
    Properties props = null
    if (file.canRead()) {
        props = new Properties()
        props.load(new FileInputStream(file))
    } else {
        System.err.println "\"${file}\" not found"
    }
    return props
}
