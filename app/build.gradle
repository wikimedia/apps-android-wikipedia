apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

import com.android.build.gradle.internal.dsl.ProductFlavor
import com.android.ddmlib.DdmPreferences

import java.util.concurrent.TimeUnit

final int ADB_TIMEOUT = TimeUnit.MINUTES.toMillis(15)
final boolean continuousIntegrationBuild = System.getenv('JENKINS_HOME') != null
final boolean preDexEnabled = hasProperty('pre.dex') ?
        Boolean.valueOf(getProperty('pre.dex').toString()) :
        !continuousIntegrationBuild
if (!preDexEnabled) {
    println 'Pre-dexing disabled.'
}

if (continuousIntegrationBuild) {
    DdmPreferences.setTimeOut(ADB_TIMEOUT)
    println "Device timeout is ${DdmPreferences.getTimeOut()}ms"
}

def static getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyy-MM-dd')
    return formattedDate
}

def computeVersionName(label) {
    return "2.7.${android.defaultConfig.versionCode}-${label}-${date}"
}

final JavaVersion JAVA_VERSION = JavaVersion.VERSION_1_8
android {
    compileSdkVersion 28

    compileOptions {
        sourceCompatibility = JAVA_VERSION
        targetCompatibility = JAVA_VERSION
    }

    dexOptions {
        preDexLibraries = preDexEnabled
        jumboMode = true
    }

    defaultConfig {
        applicationId 'org.wikipedia'
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 270
        testApplicationId 'org.wikipedia.test'
        testInstrumentationRunner "org.wikipedia.WikipediaTestRunner"
        vectorDrawables.useSupportLibrary = true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments('butterknife.minSdk': minSdkVersion.apiString,
                        'butterknife.debuggable': 'false')
            }
        }
    }

    sourceSets {
        test {
            java.srcDirs += 'src/testlib/java'
        }
        androidTest {
            java.srcDirs += 'src/testlib/java'
        }
    }

    signingConfigs {
        release {
            storeFile file("${rootDir}/config/keystore/shared-keystore.jks")
            storePassword "Weballwin"
            keyAlias "Jenkins"
            keyPassword "Weballwin"
        }
    }

    buildTypes {
        debug {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro', 'proguard-rules-debug.pro'
            testProguardFile 'test-proguard-rules.pro'
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            testProguardFile 'test-proguard-rules.pro'
        }
    }

    flavorDimensions 'default'

    productFlavors {
        dev {
            versionName computeVersionName('dev')
            applicationIdSuffix 'dev'
            signingConfig signingConfigs.debug
            dimension 'default'
        }
        alpha {
            versionName computeVersionName('alpha')
            applicationIdSuffix 'alpha'
            signingConfig signingConfigs.debug
            dimension 'default'
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a'
            universalApk true
        }
    }

    packagingOptions {
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        // required by Butter Knife

        // For Espresso testing libraries. See http://stackoverflow.com/q/33800924/970346.
        exclude 'META-INF/maven/com.google.guava/guava/pom.xml'
        exclude 'META-INF/maven/com.google.guava/guava/pom.properties'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a': 1, 'arm64-v8a': 2, x86: 3, x86_64: 4]

// For per-density APKs, create a similar map like this:
// ext.densityCodes = ['mdpi': 1, 'hdpi': 2, 'xhdpi': 3]

// For each APK output variant, override versionCode with a combination of
// ext.abiCodes * 10000 + variant.versionCode.
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        output.versionCodeOverride = project.ext.abiCodes.get(output.getFilter(com.android.build.OutputFile.ABI), 0) * 10000 + variant.versionCode
    }
}

apply from: '../gradle/src/test.gradle'
apply from: '../gradle/src/checkstyle.gradle'

dependencies {
    // To keep the Maven Central dependencies up-to-date
    // use http://gradleplease.appspot.com/ or http://search.maven.org/.
    // Debug with ./gradlew -q app:dependencies --configuration compile

    String okHttpVersion = '3.12.1'
    String supportVersion = '1.0.0'
    String retrofitVersion = '2.5.0'
    String espressoVersion = '3.1.0'
    String butterKnifeVersion = '10.0.0'
    String frescoVersion = '1.11.0'
    // When updating this version, resync file copies under app/src/main/java/com/facebook
    String testingSupportVersion = '1.1.0'
    String mockitoCore = 'org.mockito:mockito-core:1.9.5'
    String leakCanaryVersion = '1.6.2'

    implementation project(':library')
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "androidx.core:core:$supportVersion"
    implementation "androidx.legacy:legacy-support-core-utils:$supportVersion"
    implementation "androidx.legacy:legacy-support-core-ui:$supportVersion"
    implementation "androidx.fragment:fragment:$supportVersion"
    implementation 'androidx.constraintlayout:constraintlayout:1.1.2'

    implementation "androidx.cardview:cardview:$supportVersion"
    implementation "com.google.android.material:material:$supportVersion"
    implementation "androidx.recyclerview:recyclerview:$supportVersion"
    implementation "androidx.palette:palette:$supportVersion"
    implementation "androidx.legacy:legacy-preference-v14:$supportVersion"

    implementation('com.github.michael-rapp:chrome-like-tab-switcher:0.3.7') {
        // TODO: remove when this component updates its own dependency on Support 28.0.0
        exclude group: 'com.android.support'
    }
    implementation 'com.duolingo.open:rtl-viewpager:1.0.3'
    implementation "com.facebook.fresco:animated-gif:$frescoVersion"
    implementation "com.facebook.fresco:fresco:$frescoVersion"
    implementation "com.facebook.fresco:imagepipeline-okhttp3:$frescoVersion"
    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.romandanylyk:pageindicatorview:1.0.2'
    implementation "com.squareup.okhttp3:logging-interceptor:$okHttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    implementation "io.reactivex.rxjava2:rxjava:2.2.3"
    implementation "io.reactivex.rxjava2:rxandroid:2.1.0"
    implementation 'com.getkeepsafe.taptargetview:taptargetview:1.12.0'
    implementation "com.jakewharton:butterknife:$butterKnifeVersion"
    implementation "com.mapbox.mapboxsdk:mapbox-android-sdk:7.0.1"
    implementation 'com.mapbox.mapboxsdk:mapbox-android-plugin-annotation-v7:0.4.0'
    implementation 'net.hockeyapp.android:HockeySDK:5.1.1'
    implementation 'org.apache.commons:commons-lang3:3.8.1'
    implementation 'org.jsoup:jsoup:1.11.3'

    annotationProcessor "com.jakewharton:butterknife-compiler:$butterKnifeVersion"

    android.productFlavors.each { flavor ->
        String dep
        if ('dev' == flavor.name) {
            dep = "com.squareup.leakcanary:leakcanary-android:$leakCanaryVersion"
        } else {
            dep = "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanaryVersion"
        }
        "${flavor.name}Implementation" dep
    }

    testImplementation 'junit:junit:4.12'
    testImplementation mockitoCore
    testImplementation 'org.robolectric:robolectric:3.8'
    testImplementation "com.squareup.okhttp3:mockwebserver:$okHttpVersion"
    testImplementation "commons-io:commons-io:2.6"

    androidTestImplementation mockitoCore
    androidTestRuntimeOnly 'com.crittercism.dexmaker:dexmaker:1.4'
    androidTestImplementation 'com.crittercism.dexmaker:dexmaker-mockito:1.4'
    androidTestRuntimeOnly 'com.crittercism.dexmaker:dexmaker-dx:1.4'

    // Required by Android JUnit Runner.
    androidTestImplementation "androidx.annotation:annotation:$supportVersion"
    androidTestImplementation "androidx.test:rules:$testingSupportVersion" // JUnit Rules
    androidTestImplementation "androidx.test:runner:$testingSupportVersion"
    // Android JUnit Runner
    androidTestImplementation "androidx.test.espresso:espresso-core:$espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$espressoVersion"

}

addSyncContentProviderAuthority 'readinglists', 'reading_lists'

private void addSyncContentProviderAuthority(String path, String name) {
    android.productFlavors.all { ProductFlavor flavor ->
        String authority = "${appId(flavor)}.sync.${path}"
        resValue 'string', "${name.toLowerCase()}_authority", authority
        buildConfigField 'String', "${name.toUpperCase()}_AUTHORITY", "\"$authority\""
    }
}

private String appId(ProductFlavor flavor) {
    String suffix = flavor.applicationIdSuffix
    String id = android.defaultConfig.applicationId + (suffix ? ".$suffix" : '')
    return id
}
